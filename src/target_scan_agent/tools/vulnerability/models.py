from datetime import datetime
from typing import Optional, List, Dict, Any
import json
from pydantic import BaseModel, Field


class TemplateInfo(BaseModel):
    name: str
    author: List[str]
    tags: List[str]
    description: str
    reference: Optional[List[str]] = None
    severity: str
    metadata: Optional[Dict[str, Any]] = None
    classification: Optional[Dict[str, Any]] = None

    def to_json(self) -> str:
        """Convert to JSON string for serialization."""
        return self.model_dump_json()

    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary for serialization."""
        return self.model_dump(mode="json")


class NucleiFinding(BaseModel):
    template: str
    template_url: str = Field(alias="template-url")
    template_id: str = Field(alias="template-id")
    template_path: str = Field(alias="template-path")
    info: TemplateInfo
    type: str
    host: str
    port: str
    scheme: str
    url: str
    matched_at: str = Field(alias="matched-at")
    request: str
    response: str
    meta: Optional[Dict[str, Any]] = None
    ip: str
    timestamp: datetime
    curl_command: str = Field(alias="curl-command")
    matcher_status: bool = Field(alias="matcher-status")

    class Config:
        populate_by_name = True

    def to_json(self) -> str:
        """Convert to JSON string for serialization."""
        return self.model_dump_json()

    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary for serialization."""
        return self.model_dump(mode="json")


class NucleiScanResult(BaseModel):
    findings: List[NucleiFinding]
    count: int
    scan_completed: bool = True
    error: Optional[str] = None
    scan_metadata: Optional[Dict[str, Any]] = None

    @classmethod
    def create_empty(cls) -> "NucleiScanResult":
        """Create empty result for when no findings are found."""
        return cls(findings=[], count=0, scan_completed=True)

    @classmethod
    def create_error(cls, error_message: str) -> "NucleiScanResult":
        """Create error result."""
        return cls(findings=[], count=0, scan_completed=False, error=error_message)

    def has_findings(self) -> bool:
        """Check if scan has any findings."""
        return self.count > 0

    def get_findings_by_severity(self, severity: str) -> List[NucleiFinding]:
        """Get findings filtered by severity level."""
        return [f for f in self.findings if f.info.severity == severity]

    def get_critical_findings(self) -> List[NucleiFinding]:
        """Get only critical severity findings."""
        return self.get_findings_by_severity("critical")

    def get_high_findings(self) -> List[NucleiFinding]:
        """Get only high severity findings."""
        return self.get_findings_by_severity("high")

    def to_json(self) -> str:
        """Convert to JSON string for serialization."""
        return self.model_dump_json()

    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary for serialization."""
        return self.model_dump(mode="json")
