import subprocess
import time
import json
import logging
from pydantic import ValidationError

from .models import NucleiScanResult, NucleiFinding
from ..common.process_utils import (
    create_temp_file,
    delete_temp_file,
    execute_process,
    terminate_process,
    wait_for_process_completion,
)


async def nuclei_scan_tool(
    target: str,
    tags: list[str],
    severity: str | None = None,
    timeout: int = 900,
    rate_limit: int = 15,
) -> NucleiScanResult:
    """
    Run Nuclei vulnerability scanner and return structured results.

    Args:
        target: URL to scan (e.g., "http://localhost:8000")
        tags: List of tags to specify which templates to run. Valid tags: cve, xss, rce, lfi, sqli, tech, exposure, detect, panel, misconfig, config, login, default-login, auth-bypass, unauth, wordpress, wp-plugin, wp, joomla, cloud, aws, azure, gcp, amazon, microsoft, apache, network, file, iot, osint, devops, malware, token, keys, redirect
        
        severity: Filter by severity - "critical", "high", "medium", "low", "info"
        timeout: Scan timeout in seconds (will return partial results if timeout)
        rate_limit: Requests per second limit

    Returns:
        NucleiScanResult with findings, count, and metadata
        
    Raises:
        ValueError: If invalid tags are provided
    """
    # Validate arguments first
    validation_error = _validate_arguments(target, tags, severity)
    if validation_error:
        return NucleiScanResult.create_error(validation_error)
    
    process = None
    temp_file = None

    try:
        # Check templates first
        logging.info("üîÑ Checking nuclei templates...")
        _update_templates()

        temp_file = create_temp_file()

        cmd = _create_command(
            target=target,
            tags=tags,
            temp_file=temp_file,
            severity=severity,
            rate_limit=rate_limit,
        )

        logging.info(f"üöÄ Starting nuclei scan: {' '.join(cmd)}")
        start_time = time.time()

        process = execute_process(cmd)
        scan_completed = await wait_for_process_completion(process, timeout, start_time)

        res = _read_temp_file(temp_file, scan_completed)
        return res
    except Exception as e:
        logging.error(f"Error during nuclei scan: %s", e)
        return NucleiScanResult.create_error(f"Nuclei scan failed: {str(e)}")
    finally:
        terminate_process(process)
        delete_temp_file(temp_file)


def _read_temp_file(temp_file: str, scan_completed: bool) -> NucleiScanResult:
    """Read JSONL file and return structured results."""
    findings = []

    try:
        with open(temp_file, "r") as f:
            content = f.read().strip()

            if not content:
                logging.info("No findings in nuclei output file")
                return NucleiScanResult(
                    findings=[], count=0, scan_completed=scan_completed
                )

            # Process each line as separate JSON object (JSONL format)
            for line_num, line in enumerate(content.split("\n"), 1):
                line = line.strip()
                if line:
                    try:
                        finding_data = json.loads(line)
                        # Validate and parse with Pydantic
                        finding = NucleiFinding.model_validate(finding_data)
                        findings.append(finding)
                    except json.JSONDecodeError as e:
                        logging.warning(
                            f"Failed to parse JSON line {line_num}: {line} - {e}"
                        )
                    except ValidationError as e:
                        logging.warning(
                            f"Failed to validate finding data line {line_num}: {e}"
                        )

        logging.info(f"Successfully parsed {len(findings)} findings from nuclei output")

        return NucleiScanResult(
            findings=findings, count=len(findings), scan_completed=scan_completed
        )

    except Exception as e:
        logging.error(f"Error reading nuclei output file: {e}")
        return NucleiScanResult.create_error(f"Failed to read results: {str(e)}")


def _update_templates():
    subprocess.run(
        ["nuclei", "-update-templates"], capture_output=True, text=True, timeout=60
    )


def _create_command(
    target: str,
    tags: list[str],
    temp_file: str,
    severity: str | None = None,
    rate_limit: int = 15,
) -> list[str]:
    cmd = [
        "nuclei",
        "-u",
        target,
        "-tags",
        ",".join(tags),
        "-o",
        temp_file,
        "-jsonl",
        # "-silent",
        "-rate-limit",
        str(rate_limit),
    ]

    if severity:
        cmd.extend(["-severity", severity])

    return cmd


def _validate_arguments(target: str, tags: list[str], severity: str | None) -> str | None:
    """
    Validate nuclei tool arguments and return error message if invalid.
    
    Returns:
        None if valid, error message string if invalid
    """
    # Define all valid tags
    VALID_TAGS = {
        # High-impact vulnerabilities
        'cve', 'xss', 'rce', 'lfi', 'sqli',
        # Technology detection and exposure
        'tech', 'exposure', 'detect', 'panel',
        # Configuration and access
        'misconfig', 'config', 'login', 'default-login', 'auth-bypass', 'unauth',
        # CMS-specific
        'wordpress', 'wp-plugin', 'wp', 'joomla',
        # Cloud platforms
        'cloud', 'aws', 'azure', 'gcp', 'amazon', 'microsoft',
        # Infrastructure
        'apache', 'network', 'file', 'iot',
        # Other categories
        'osint', 'devops', 'malware', 'token', 'keys', 'redirect'
    }
    
    VALID_SEVERITIES = {'critical', 'high', 'medium', 'low', 'info'}
    
    # Common mistakes mapping
    COMMON_MISTAKES = {
        'cves': 'cve',
        'exposures': 'exposure', 
        'misconfigurations': 'misconfig',
        'configs': 'config',
        'vulnerabilities': 'cve',
        'configuration': 'config',
        'misconfiguration': 'misconfig'
    }
    
    # Validate target
    if not target or not isinstance(target, str):
        return "‚ùå VALIDATION ERROR: 'target' must be a non-empty string URL (e.g., 'http://localhost:8000')"
    
    if not target.startswith(('http://', 'https://')):
        return f"‚ùå VALIDATION ERROR: 'target' must be a valid URL starting with http:// or https://. Got: '{target}'"
    
    # Validate tags
    if not tags or not isinstance(tags, list):
        return "‚ùå VALIDATION ERROR: 'tags' must be a non-empty list of valid tag strings"
    
    if len(tags) == 0:
        return "‚ùå VALIDATION ERROR: 'tags' list cannot be empty. You must specify at least one tag."
    
    # Check for invalid tags
    invalid_tags = []
    suggestions = []
    
    for tag in tags:
        if not isinstance(tag, str):
            return f"‚ùå VALIDATION ERROR: All tags must be strings. Got: {type(tag)} for tag: {tag}"
        
        if tag not in VALID_TAGS:
            invalid_tags.append(tag)
            # Check if it's a common mistake
            if tag in COMMON_MISTAKES:
                suggestions.append(f"'{tag}' ‚Üí '{COMMON_MISTAKES[tag]}'")
            else:
                # Find similar tags
                similar = [valid_tag for valid_tag in VALID_TAGS if tag.lower() in valid_tag or valid_tag in tag.lower()]
                if similar:
                    suggestions.append(f"'{tag}' ‚Üí try one of: {similar[:3]}")
                else:
                    suggestions.append(f"'{tag}' ‚Üí no similar tags found")
    
    if invalid_tags:
        error_msg = f"""‚ùå VALIDATION ERROR: Invalid nuclei tags: {invalid_tags}

üîß CORRECTIONS NEEDED:
{chr(10).join(suggestions)}

‚úÖ VALID TAGS YOU CAN USE:
High-impact: cve, xss, rce, lfi, sqli
Exposure: exposure, misconfig, panel, login
CMS: wordpress, wp-plugin, joomla  
Cloud: cloud, aws, azure, gcp
Tech: tech, detect, apache, network

üìù EXAMPLE CORRECT CALLS:
- nuclei_scan_tool(target="http://localhost:8000", tags=["cve"])
- nuclei_scan_tool(target="http://localhost:8000", tags=["exposure", "misconfig"])
- nuclei_scan_tool(target="http://localhost:8000", tags=["wordpress", "wp-plugin"])

Please use the exact tag names from the valid list above."""
        return error_msg
    
    # Validate severity
    if severity is not None and severity not in VALID_SEVERITIES:
        return f"‚ùå VALIDATION ERROR: Invalid severity '{severity}'. Must be one of: {sorted(VALID_SEVERITIES)}"
    
    return None  # All validations passed
