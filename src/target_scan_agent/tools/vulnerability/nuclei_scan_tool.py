import subprocess
import json
import tempfile
import os
import time
import signal
from typing import Optional, List


def nuclei_scan_tool(
    target: str,
    scan_type: str = "quick",
    severity: Optional[str] = None,
    timeout: int = 900,
    rate_limit: int = 15,
) -> str:
    """
    Run Nuclei vulnerability scanner and return raw JSON output as string.

    Args:
        target: URL to scan (e.g., "http://localhost:8000")
        scan_type: Scan strategy - "quick", "comprehensive", "tech-detect", "misconfig", "cve-only"
        severity: Filter by severity - "critical", "high", "medium", "low", "info"
        timeout: Scan timeout in seconds (will return partial results if timeout)
        rate_limit: Requests per second limit
    
    Returns:
        Raw nuclei JSON output as string (JSONL format)
    """
    process = None
    temp_file = None
    
    try:
        # Check templates first
        print("üîÑ Checking nuclei templates...")
        templates_check = subprocess.run(
            ["nuclei", "-update-templates"], 
            capture_output=True, 
            text=True, 
            timeout=60
        )
        
        # Scan strategies
        scan_strategies = {
            "quick": {
                "tags": ["tech-detect", "exposure"],  # Use tags that definitely exist
                "description": "Quick technology and exposure scan",
            },
            "comprehensive": {
                "tags": ["tech-detect", "exposure", "misconfig"],
                "description": "Comprehensive vulnerability scan",
            },
            "tech-detect": {
                "tags": ["tech-detect"],
                "description": "Technology detection scan",
            },
            "misconfig": {
                "tags": ["misconfig", "exposure"],
                "description": "Misconfiguration scan",
            },
            "cve-only": {
                "tags": ["cve"],
                "description": "CVE vulnerability scan",
            },
        }

        strategy = scan_strategies.get(scan_type, scan_strategies["quick"])

        # Create temp file for JSON output
        with tempfile.NamedTemporaryFile(mode="w+", suffix=".jsonl", delete=False) as f:
            temp_file = f.name

        # Build nuclei command with JSON output
        cmd = [
            "nuclei",
            "-u", target,
            "-tags", ",".join(strategy["tags"]),
            "-o", temp_file,
            "-jsonl",  # Output in JSON Lines format
            "-silent", # Reduce console noise
            "-rate-limit", str(rate_limit),
        ]

        if severity:
            cmd.extend(["-severity", severity])

        print(f"üöÄ Starting nuclei scan: {' '.join(cmd)}")
        start_time = time.time()

        # Start nuclei process
        process = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            cwd=os.path.expanduser("~")
        )

        # Monitor progress and handle timeout
        last_check_time = start_time
        timeout_occurred = False
        
        while True:
            # Check if process is done
            poll_result = process.poll()
            if poll_result is not None:
                # Process finished
                stdout, stderr = process.communicate()
                print(f"‚úÖ Nuclei completed (exit code: {poll_result})")
                break
            
            # Check for timeout
            elapsed = time.time() - start_time
            if elapsed > timeout:
                print(f"‚è±Ô∏è Timeout reached ({timeout}s), collecting partial results...")
                timeout_occurred = True
                
                # Terminate nuclei gracefully
                try:
                    process.terminate()
                    process.wait(timeout=10)
                except:
                    process.kill()
                    process.wait()
                
                stdout, stderr = process.communicate()
                break
            
            # Progress update every 30 seconds
            if time.time() - last_check_time > 30:
                print(f"üìä Scan in progress... ({elapsed:.0f}s elapsed)")
                last_check_time = time.time()
            
            # Sleep briefly to avoid busy waiting
            time.sleep(1)

        # Read raw JSON output from file
        raw_json_output = ""
        if temp_file and os.path.exists(temp_file):
            try:
                with open(temp_file, "r") as f:
                    raw_json_output = f.read().strip()
            except Exception as e:
                print(f"Warning: Could not read output file: {e}")
        
        # Clean up temp file
        if temp_file and os.path.exists(temp_file):
            os.unlink(temp_file)

        # Return raw JSON as string
        if raw_json_output:
            return raw_json_output
        else:
            return ""  # Empty string if no results

    except FileNotFoundError:
        return """‚ùå Nuclei not found. Install with:

go install -v github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest
nuclei -update-templates"""
    
    except Exception as e:
        return f"‚ùå Nuclei scan failed: {str(e)}"
    
    finally:
        # Ensure cleanup
        if process and process.poll() is None:
            try:
                process.terminate()
                process.wait(timeout=5)
            except:
                try:
                    process.kill()
                except:
                    pass
        
        if temp_file and os.path.exists(temp_file):
            try:
                os.unlink(temp_file)
            except:
                pass
