import json
from datetime import datetime
from src.target_scan_agent.tools.vulnerability.models import (
    NucleiScanResult,
    NucleiFinding,
    TemplateInfo
)


class TestNucleiModels:
    """Unit tests for Nuclei vulnerability models."""

    def test_nuclei_scan_result_serialization_empty(self):
        """Test serialization of empty NucleiScanResult."""
        result = NucleiScanResult.create_empty()
        
        # Test to_json() method
        assert isinstance(result.to_json(), str)
        
        # Test to_dict() method
        dict_result = result.to_dict()
        assert isinstance(dict_result, dict)
        assert dict_result["count"] == 0
        assert dict_result["findings"] == []
        assert dict_result["scan_completed"] is True
        
        # Test standard json.dumps() with to_dict()
        json_dumps_result = json.dumps(result.to_dict())
        assert isinstance(json_dumps_result, str)
        
    def test_nuclei_scan_result_serialization_with_error(self):
        """Test serialization of NucleiScanResult with error."""
        error_msg = "Test error message"
        result = NucleiScanResult.create_error(error_msg)
        
        # Test serialization
        json_str = result.to_json()
        dict_result = result.to_dict()
        
        assert dict_result["error"] == error_msg
        assert dict_result["scan_completed"] is False
        assert dict_result["count"] == 0
        
    def test_nuclei_scan_result_round_trip_serialization(self):
        """Test round-trip serialization (serialize -> deserialize)."""
        # Create original result
        original = NucleiScanResult.create_empty()
        
        # Serialize to JSON
        json_str = original.to_json()
        
        # Deserialize back
        loaded_dict = json.loads(json_str)
        reconstructed = NucleiScanResult.model_validate(loaded_dict)
        
        # Verify they match
        assert reconstructed.count == original.count
        assert reconstructed.scan_completed == original.scan_completed
        assert reconstructed.error == original.error
        assert len(reconstructed.findings) == len(original.findings)
        
    def test_nuclei_scan_result_with_finding_serialization(self):
        """Test serialization with actual finding data."""
        # Create a mock finding
        template_info = TemplateInfo(
            name="Test Template",
            author=["test-author"],
            tags=["test", "tech"],
            description="Test description",
            severity="info"
        )
        
        finding = NucleiFinding(
            template="test-template.yaml",
            info=template_info,
            type="http",
            host="example.com",
            port="443",
            scheme="https",
            url="https://example.com",
            request="GET / HTTP/1.1",
            response="HTTP/1.1 200 OK",
            ip="1.2.3.4",
            timestamp=datetime(2023, 1, 1, 12, 0, 0),
            **{
                "template-url": "https://example.com/template",
                "template-id": "test-template",
                "template-path": "/path/to/template",
                "matched-at": "https://example.com/",
                "curl-command": "curl https://example.com",
                "matcher-status": True
            }
        )
        
        result = NucleiScanResult(
            findings=[finding],
            count=1,
            scan_completed=True
        )
        
        # Test serialization
        json_str = result.to_json()
        dict_result = result.to_dict()
        
        assert dict_result["count"] == 1
        assert len(dict_result["findings"]) == 1
        assert dict_result["findings"][0]["template_id"] == "test-template"
        assert dict_result["findings"][0]["info"]["severity"] == "info"
        
        # Test round-trip
        loaded_dict = json.loads(json_str)
        reconstructed = NucleiScanResult.model_validate(loaded_dict)
        
        assert reconstructed.count == 1
        assert len(reconstructed.findings) == 1
        assert reconstructed.findings[0].template_id == "test-template"
        assert reconstructed.findings[0].info.severity == "info"
        
    def test_json_dumps_compatibility(self):
        """Test that result.to_dict() works with standard json.dumps()."""
        result = NucleiScanResult.create_empty()
        
        # This should not raise any exceptions
        json_output = json.dumps(result.to_dict())
        assert isinstance(json_output, str)
        
        # Should be loadable back
        loaded = json.loads(json_output)
        assert loaded["count"] == 0
        assert loaded["scan_completed"] is True

    def test_real_nuclei_data_serialization(self):
        """Test serialization with real nuclei scan data."""
        # Create real nuclei finding data
        template_info = TemplateInfo(
            name='Public Swagger API - Detect',
            author=['pdteam', 'c-sh0'],
            tags=['exposure', 'api', 'swagger'],
            description='Public Swagger API was detected.',
            reference=['https://swagger.io/'],
            severity='info',
            metadata={
                'verified': True,
                'max-request': 59,
                'shodan-query': 'http.title:"swagger"'
            },
            classification={
                'cve-id': None,
                'cwe-id': ['cwe-200'],
                'cvss-metrics': 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N'
            }
        )

        finding = NucleiFinding(
            template='http/exposures/apis/swagger-api.yaml',
            info=template_info,
            type='http',
            host='localhost:8080',
            port='8080',
            scheme='http',
            url='http://localhost:8080',
            request='GET /docs HTTP/1.1\r\nHost: localhost:8080\r\nUser-Agent: Mozilla/5.0 (Fedora; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36\r\nAccept: text/html\r\nAccept-Language: en\r\nAccept-Encoding: gzip\r\n\r\n',
            response='HTTP/1.1 200 OK\r\nConnection: close\r\nContent-Length: 943\r\nContent-Type: text/html; charset=utf-8\r\nDate: Wed, 11 Jun 2025 05:32:19 GMT\r\nServer: uvicorn\r\n\r\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n    <link type="text/css" rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui.css">\n    <link rel="shortcut icon" href="https://fastapi.tiangolo.com/img/favicon.png">\n    <title>Vulnerable Test API - Swagger UI</title>\n    </head>\n    <body>\n    <div id="swagger-ui">\n    </div>\n    <script src="https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui-bundle.js"></script>\n    <!-- `SwaggerUIBundle` is now available on the page -->\n    <script>\n    const ui = SwaggerUIBundle({\n        url: \'/openapi.json\',\n    "dom_id": "#swagger-ui",\n"layout": "BaseLayout",\n"deepLinking": true,\n"showExtensions": true,\n"showCommonExtensions": true,\noauth2RedirectUrl: window.location.origin + \'/docs/oauth2-redirect\',\n    presets: [\n        SwaggerUIBundle.presets.apis,\n        SwaggerUIBundle.SwaggerUIStandalonePreset\n        ],\n    })\n    </script>\n    </body>\n    </html>\n    ',
            meta={'paths': '/docs'},
            ip='127.0.0.1',
            timestamp=datetime(2025, 6, 11, 7, 32, 19, 689121),
            **{
                "template-url": 'https://cloud.projectdiscovery.io/public/swagger-api',
                "template-id": 'swagger-api',
                "template-path": '/Users/vitaliihonchar/nuclei-templates/http/exposures/apis/swagger-api.yaml',
                "matched-at": 'http://localhost:8080/docs',
                "curl-command": "curl -X 'GET' -H 'Accept: text/html' -H 'Accept-Language: en' -H 'User-Agent: Mozilla/5.0 (Fedora; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36' 'http://localhost:8080/docs'",
                "matcher-status": True
            }
        )

        result = NucleiScanResult(
            findings=[finding],
            count=1,
            scan_completed=False,
            error=None,
            scan_metadata=None
        )

        # Test serialization methods
        json_str = result.to_json()
        dict_result = result.to_dict()

        # Verify structure
        assert dict_result["count"] == 1
        assert dict_result["scan_completed"] is False
        assert len(dict_result["findings"]) == 1

        # Verify finding data
        finding_dict = dict_result["findings"][0]
        assert finding_dict["template_id"] == "swagger-api"
        assert finding_dict["host"] == "localhost:8080"
        assert finding_dict["matched_at"] == "http://localhost:8080/docs"
        assert finding_dict["info"]["name"] == "Public Swagger API - Detect"
        assert finding_dict["info"]["severity"] == "info"
        assert "swagger" in finding_dict["info"]["tags"]

        # Test round-trip serialization
        loaded_dict = json.loads(json_str)
        reconstructed = NucleiScanResult.model_validate(loaded_dict)

        # Verify reconstructed object
        assert reconstructed.count == 1
        assert reconstructed.scan_completed is False
        assert len(reconstructed.findings) == 1

        reconstructed_finding = reconstructed.findings[0]
        assert reconstructed_finding.template_id == "swagger-api"
        assert reconstructed_finding.host == "localhost:8080"
        assert reconstructed_finding.matched_at == "http://localhost:8080/docs"
        assert reconstructed_finding.info.name == "Public Swagger API - Detect"
        assert reconstructed_finding.info.severity == "info"
        assert "swagger" in reconstructed_finding.info.tags

        # Test json.dumps() compatibility
        json_dumps_result = json.dumps(result.to_dict())
        assert isinstance(json_dumps_result, str)
        
        # Should be parseable
        parsed = json.loads(json_dumps_result)
        assert parsed["findings"][0]["template_id"] == "swagger-api"

    def test_template_info_serialization(self):
        """Test serialization of TemplateInfo model."""
        template_info = TemplateInfo(
            name="Test Template",
            author=["author1", "author2"],
            tags=["web", "security", "test"],
            description="A test template for security assessment",
            reference=["https://example.com/reference"],
            severity="high",
            metadata={"verified": True, "max-request": 5},
            classification={"cve-id": "CVE-2023-1234", "cwe-id": ["cwe-79"]}
        )
        
        # Test to_json() method
        json_str = template_info.to_json()
        assert isinstance(json_str, str)
        
        # Test to_dict() method
        dict_result = template_info.to_dict()
        assert isinstance(dict_result, dict)
        assert dict_result["name"] == "Test Template"
        assert dict_result["author"] == ["author1", "author2"]
        assert dict_result["tags"] == ["web", "security", "test"]
        assert dict_result["severity"] == "high"
        
        # Test standard json.dumps() with to_dict()
        json_dumps_result = json.dumps(template_info.to_dict())
        assert isinstance(json_dumps_result, str)

    def test_template_info_round_trip_serialization(self):
        """Test round-trip serialization of TemplateInfo."""
        original = TemplateInfo(
            name="Round Trip Test",
            author=["test-author"],
            tags=["test"],
            description="Test description",
            severity="medium"
        )
        
        # Serialize to JSON
        json_str = original.to_json()
        
        # Deserialize back
        loaded_dict = json.loads(json_str)
        reconstructed = TemplateInfo.model_validate(loaded_dict)
        
        # Verify they match
        assert reconstructed.name == original.name
        assert reconstructed.author == original.author
        assert reconstructed.tags == original.tags
        assert reconstructed.description == original.description
        assert reconstructed.severity == original.severity

    def test_nuclei_finding_serialization(self):
        """Test serialization of NucleiFinding model."""
        template_info = TemplateInfo(
            name="Test Finding Template",
            author=["test-author"],
            tags=["test", "nuclei"],
            description="Test finding description",
            severity="info"
        )
        
        finding = NucleiFinding(
            template="test-template.yaml",
            info=template_info,
            type="http",
            host="test.example.com",
            port="443",
            scheme="https",
            url="https://test.example.com",
            request="GET / HTTP/1.1",
            response="HTTP/1.1 200 OK",
            ip="192.168.1.1",
            timestamp=datetime(2023, 6, 15, 10, 30, 0),
            **{
                "template-url": "https://example.com/template",
                "template-id": "test-template-id",
                "template-path": "/path/to/template.yaml",
                "matched-at": "https://test.example.com/",
                "curl-command": "curl https://test.example.com",
                "matcher-status": True
            }
        )
        
        # Test to_json() method
        json_str = finding.to_json()
        assert isinstance(json_str, str)
        
        # Test to_dict() method
        dict_result = finding.to_dict()
        assert isinstance(dict_result, dict)
        assert dict_result["template"] == "test-template.yaml"
        assert dict_result["host"] == "test.example.com"
        assert dict_result["template_id"] == "test-template-id"
        assert dict_result["info"]["name"] == "Test Finding Template"
        
        # Test standard json.dumps() with to_dict()
        json_dumps_result = json.dumps(finding.to_dict())
        assert isinstance(json_dumps_result, str)

    def test_nuclei_finding_round_trip_serialization(self):
        """Test round-trip serialization of NucleiFinding."""
        template_info = TemplateInfo(
            name="Round Trip Finding",
            author=["test"],
            tags=["test"],
            description="Test",
            severity="low"
        )
        
        original = NucleiFinding(
            template="round-trip.yaml",
            info=template_info,
            type="http",
            host="localhost",
            port="8080",
            scheme="http",
            url="http://localhost:8080",
            request="GET /test HTTP/1.1",
            response="HTTP/1.1 200 OK",
            ip="127.0.0.1",
            timestamp=datetime(2023, 1, 1, 12, 0, 0),
            **{
                "template-url": "http://localhost/template",
                "template-id": "round-trip-test",
                "template-path": "/tmp/template.yaml",
                "matched-at": "http://localhost:8080/test",
                "curl-command": "curl http://localhost:8080/test",
                "matcher-status": True
            }
        )
        
        # Serialize to JSON
        json_str = original.to_json()
        
        # Deserialize back
        loaded_dict = json.loads(json_str)
        reconstructed = NucleiFinding.model_validate(loaded_dict)
        
        # Verify they match
        assert reconstructed.template == original.template
        assert reconstructed.host == original.host
        assert reconstructed.template_id == original.template_id
        assert reconstructed.info.name == original.info.name
        assert reconstructed.timestamp == original.timestamp

    def test_nuclei_scan_result_methods_after_serialization(self):
        """Test that helper methods work correctly after serialization."""
        # Create findings with different severities
        critical_template = TemplateInfo(
            name="Critical Issue",
            author=["security-team"],
            tags=["critical"],
            description="Critical security issue",
            severity="critical"
        )
        
        high_template = TemplateInfo(
            name="High Issue",
            author=["security-team"],
            tags=["high"],
            description="High severity issue",
            severity="high"
        )
        
        info_template = TemplateInfo(
            name="Info Issue",
            author=["security-team"],
            tags=["info"],
            description="Informational finding",
            severity="info"
        )
        
        findings = [
            NucleiFinding(
                template="critical.yaml",
                info=critical_template,
                type="http",
                host="example.com",
                port="443",
                scheme="https",
                url="https://example.com",
                request="GET / HTTP/1.1",
                response="HTTP/1.1 200 OK",
                ip="1.2.3.4",
                timestamp=datetime(2023, 1, 1, 12, 0, 0),
                **{
                    "template-url": "https://example.com/critical",
                    "template-id": "critical-finding",
                    "template-path": "/path/critical.yaml",
                    "matched-at": "https://example.com/",
                    "curl-command": "curl https://example.com",
                    "matcher-status": True
                }
            ),
            NucleiFinding(
                template="high.yaml",
                info=high_template,
                type="http",
                host="example.com",
                port="443",
                scheme="https",
                url="https://example.com",
                request="GET / HTTP/1.1",
                response="HTTP/1.1 200 OK",
                ip="1.2.3.4",
                timestamp=datetime(2023, 1, 1, 12, 0, 0),
                **{
                    "template-url": "https://example.com/high",
                    "template-id": "high-finding",
                    "template-path": "/path/high.yaml",
                    "matched-at": "https://example.com/",
                    "curl-command": "curl https://example.com",
                    "matcher-status": True
                }
            ),
            NucleiFinding(
                template="info.yaml",
                info=info_template,
                type="http",
                host="example.com",
                port="443",
                scheme="https",
                url="https://example.com",
                request="GET / HTTP/1.1",
                response="HTTP/1.1 200 OK",
                ip="1.2.3.4",
                timestamp=datetime(2023, 1, 1, 12, 0, 0),
                **{
                    "template-url": "https://example.com/info",
                    "template-id": "info-finding",
                    "template-path": "/path/info.yaml",
                    "matched-at": "https://example.com/",
                    "curl-command": "curl https://example.com",
                    "matcher-status": True
                }
            )
        ]
        
        result = NucleiScanResult(
            findings=findings,
            count=3,
            scan_completed=True
        )
        
        # Test methods before serialization
        assert result.has_findings() is True
        assert len(result.get_critical_findings()) == 1
        assert len(result.get_high_findings()) == 1
        assert len(result.get_findings_by_severity("info")) == 1
        
        # Serialize and deserialize
        json_str = result.to_json()
        loaded_dict = json.loads(json_str)
        reconstructed = NucleiScanResult.model_validate(loaded_dict)
        
        # Test methods after serialization
        assert reconstructed.has_findings() is True
        assert len(reconstructed.get_critical_findings()) == 1
        assert len(reconstructed.get_high_findings()) == 1
        assert len(reconstructed.get_findings_by_severity("info")) == 1
        
        # Verify finding details are preserved
        critical_finding = reconstructed.get_critical_findings()[0]
        assert critical_finding.info.severity == "critical"
        assert critical_finding.template_id == "critical-finding"