import json
import subprocess

import pytest

from src.target_scan_agent.tools.vulnerability.models import NucleiScanResult
from src.target_scan_agent.tools.vulnerability.nuclei_scan_tool import nuclei_scan_tool


class TestNucleiIntegration:
    """Integration tests for nuclei_scan_tool against local vulnerable FastAPI app."""

    def is_nuclei_available(self):
        """Check if nuclei binary is available."""
        try:
            result = subprocess.run(
                ["nuclei", "-version"], capture_output=True, text=True, timeout=10
            )
            return result.returncode == 0
        except (FileNotFoundError, subprocess.TimeoutExpired):
            return False

    def validate_nuclei_scan_result(self, result: NucleiScanResult):
        """Validate nuclei scan result structure and assert Swagger exposure."""
        assert isinstance(result, NucleiScanResult)

        if result.error:
            print(f"Scan error: {result.error}")
            return True

        if not result.has_findings():
            print("No findings detected")
            # For vulnerable FastAPI app, we expect at least Swagger exposure
            assert False, (
                "Expected to find Swagger API exposure but no findings detected"
            )

        print(f"Scan completed: {result.scan_completed}")
        print(f"Total findings: {result.count}")

        # Look for Swagger API exposure specifically
        swagger_found = False
        for i, finding in enumerate(result.findings, 1):
            print(f"Finding {i}: {finding.template_id} - {finding.info.name}")
            print(f"  Severity: {finding.info.severity}")
            print(f"  URL: {finding.matched_at}")
            print(f"  Description: {finding.info.description}")

            # Check for Swagger API detection
            if (
                finding.template_id == "swagger-api"
                or "swagger" in finding.info.name.lower()
            ):
                swagger_found = True
                print(f"  âœ… Found Swagger API exposure: {finding.matched_at}")

                # Assert specific Swagger finding properties
                assert "swagger" in finding.info.tags or "api" in finding.info.tags
                assert finding.info.severity == "info"
                assert "/docs" in finding.matched_at or "/swagger" in finding.matched_at

        # Test helper methods
        critical_findings = result.get_critical_findings()
        high_findings = result.get_high_findings()

        print(f"Critical findings: {len(critical_findings)}")
        print(f"High findings: {len(high_findings)}")

        # Assert that we found the expected Swagger exposure
        assert swagger_found, (
            "Expected to find Swagger API exposure vulnerability but none detected"
        )

        return True

    @pytest.mark.integration
    async def test_nuclei_scan_vulnerable_app(self, fastapi_server):
        """Happy case test: Scan vulnerable FastAPI app with nuclei."""
        if not self.is_nuclei_available():
            pytest.skip("Nuclei not available")

        print(f"\nðŸŽ¯ Testing nuclei scan against vulnerable app at: {fastapi_server}")

        # Run nuclei scan against our vulnerable FastAPI app
        result = await nuclei_scan_tool(
            target=fastapi_server,
            tags=["tech", "exposure", "misconfig"],
            timeout=60,
            rate_limit=10,
        )

        print(f"\nðŸ“Š Nuclei scan results:")
        print("=" * 50)

        # Basic validation
        assert isinstance(result, NucleiScanResult)

        # Validate and display results
        self.validate_nuclei_scan_result(result)

        print("=" * 50)
        print("âœ… Test completed successfully!")
