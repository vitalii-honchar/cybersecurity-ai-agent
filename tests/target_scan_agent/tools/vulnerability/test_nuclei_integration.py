import pytest
import json
import subprocess
from src.target_scan_agent.tools.vulnerability.nuclei_scan_tool import nuclei_scan_tool


class TestNucleiIntegration:
    """Integration tests for nuclei_scan_tool against local vulnerable FastAPI app."""

    def is_nuclei_available(self):
        """Check if nuclei binary is available."""
        try:
            result = subprocess.run(
                ["nuclei", "-version"], capture_output=True, text=True, timeout=10
            )
            return result.returncode == 0
        except (FileNotFoundError, subprocess.TimeoutExpired):
            return False

    def validate_nuclei_json_output(self, output):
        """Validate nuclei JSON output format."""
        if not output.strip():
            return True  # Empty output is valid

        lines = output.strip().split("\n")
        valid_findings = 0

        for line in lines:
            if line.strip():
                try:
                    json_data = json.loads(line)
                    assert isinstance(json_data, dict)
                    if "template-id" in json_data:
                        assert "info" in json_data
                        assert "type" in json_data
                        valid_findings += 1
                        print(
                            f"Found: {json_data.get('template-id')} - {json_data.get('info', {}).get('name')}"
                        )
                except json.JSONDecodeError as e:
                    pytest.fail(f"Invalid JSON in nuclei output: {line} - Error: {e}")

        print(f"Total valid findings: {valid_findings}")
        return True

    @pytest.mark.integration
    async def test_nuclei_scan_vulnerable_app(self, fastapi_server):
        """Happy case test: Scan vulnerable FastAPI app with nuclei."""
        if not self.is_nuclei_available():
            pytest.skip("Nuclei not available")

        print(f"\nðŸŽ¯ Testing nuclei scan against vulnerable app at: {fastapi_server}")

        # Run nuclei scan against our vulnerable FastAPI app
        result = await nuclei_scan_tool(
            target=fastapi_server, scan_type="quick", timeout=60, rate_limit=10
        )

        print(f"\nðŸ“Š Nuclei scan results:")
        print("=" * 50)

        # Basic validation
        assert isinstance(result, str)

        # If we got output, validate and display it
        if result.strip():
            self.validate_nuclei_json_output(result)
            print(result)
        else:
            print("No vulnerabilities found or empty output")

        print("=" * 50)
        print("âœ… Test completed successfully!")
